#       modified:   jni/com_android_bluetooth_btservice_AdapterService.cpp
#       modified:   src/com/android/bluetooth/btservice/AdapterService.java
diff --git a/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp b/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
index 2ef387d..ae95125 100644
--- a/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
+++ b/packages/apps/Bluetooth/jni/com_android_bluetooth_btservice_AdapterService.cpp
@@ -1104,12 +1104,6 @@ static jboolean configHciSnoopLogNative(JNIEnv* env, jobject obj, jboolean enabl
 
     jboolean result = JNI_FALSE;
 
-    if (!sBluetoothInterface) return result;
-
-    int ret = sBluetoothInterface->config_hci_snoop_log(enable);
-
-    result = (ret == BT_STATUS_SUCCESS) ? JNI_TRUE : JNI_FALSE;
-
     return result;
 }
 
diff --git a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
index 88066c5..99cecf7 100644
--- a/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
+++ b/packages/apps/Bluetooth/src/com/android/bluetooth/btservice/AdapterService.java
@@ -967,15 +967,7 @@ public class AdapterService extends Service {
         }
 
         public boolean configHciSnoopLog(boolean enable) {
-            if ((Binder.getCallingUid() != Process.SYSTEM_UID) &&
-                (!Utils.checkCaller())) {
-                Log.w(TAG,"configHciSnoopLog(): not allowed for non-active user");
                 return false;
-            }
-
-            AdapterService service = getService();
-            if (service == null) return false;
-            return service.configHciSnoopLog(enable);
         }
 
         public void registerCallback(IBluetoothCallback cb) {
@@ -1506,8 +1498,7 @@ public class AdapterService extends Service {
      }
 
     boolean configHciSnoopLog(boolean enable) {
-        enforceCallingOrSelfPermission(BLUETOOTH_PERM, "Need BLUETOOTH permission");
-        return configHciSnoopLogNative(enable);
+        return false;
     }
 
      void registerCallback(IBluetoothCallback cb) {
